
package dns

import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertEquals
import kotlin.random.Random

class AppTest {
    @Test fun appHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    // helper to convert a hex string to a bytearray
    fun hexToByteArray(hexString: String): ByteArray = hexString.chunked(2).map({ it.toInt(16).toByte() }).toByteArray()

    @Test fun testBuildQuery() {
        var query = buildQuery("www.example.com", TYPE_A)
        val expected = "82980100000100000000000003777777076578616d706c6503636f6d0000010001"
        assertEquals(expected.slice(4..expected.length-1), 
            query.toHex().slice(4..expected.length-1),
            )
    }

    @Test fun testBuildHeader() {
        val flags: Int = 1 shl 8
        val header = DnsHeader(Integer.decode("0x8298"), flags, numQuestions = 1)
        val headerBytes = headerToBytes(header)
        assertEquals("829801000001000000000000", headerBytes.toHex())
    }

    @Test fun testBuildQuestion() {
        val question = DnsQuestion(encodeDnsName("www.example.com"), CLASS_IN, TYPE_A)
        val questionBytes = questionToBytes(question)
        assertEquals("03777777076578616d706c6503636f6d0000010001", questionBytes.toHex())
    }

    @Test fun testConversion() {
        var buffer = ByteArray(2)
        for (i in 0..10) {
            val rnd = Random.nextInt(0, 65536)
            writeTwoBytesToBuffer(buffer, 0, rnd)
            val actual = readTwoBytesToInt(buffer, 0)
            // println("Int = $rnd | IntBytes = ${rnd.toString(2)} | Hex = ${buffer.toHex()} | Actual = ${actual} | ActualBytes = ${actual.toString(2)}")
            assertEquals(rnd, actual)
        }
    }

    @Test fun testParseHeader() {
        val buffer = hexToByteArray("2e7981800001000100000000")        
        val reader = ByteArrayReader(buffer)
        val header = parseHeader(reader)
        assertEquals(1, header.numAnswers)
        assertEquals(1, header.numQuestions)
        assertEquals(33152, header.flags)
    }

    @Test fun testDecodeDomainName() {
        val buffer = hexToByteArray("03777777076578616d706c6503636f6d00")
        val reader = ByteArrayReader(buffer)
        val expected = "www.example.com"
        val actual = decodeDnsName(reader)
        assertEquals(expected, actual)
    }

    @Test fun testParseQuestion() {
        val buffer = hexToByteArray("03777777076578616d706c6503636f6d0000010001")
        val reader = ByteArrayReader(buffer)
        val question = parseQuestion(reader)
        assertEquals("www.example.com", decodeDnsName(ByteArrayReader(question.name)))
        assertEquals(1, question.type_)
        assertEquals(1, question.class_)
    }

    @Test fun testDecodeCompressedDomainName() {
        val buffer = hexToByteArray("23138180000100010000000003777777076578616d706c6503636f6d0000010001c00c00010001000051a500045db8d822000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
        val reader = ByteArrayReader(buffer)
        reader.seek(33) // compressed name starts at byte 33 (0xc0)
        val name = decodeDnsName(reader)
        assertEquals("www.example.com", name)
    }

    @Test fun testDecodeDnsRecord() {
        val buffer = hexToByteArray("03777777076578616d706c6503636f6d000001000100003dc700045db8d822000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
        val reader = ByteArrayReader(buffer)
        val record = parseRecord(reader)
        assertEquals("www.example.com", decodeDnsName(ByteArrayReader(record.name)))
        assertEquals(1, record.type_)
        assertEquals(1, record.class_)
        assertEquals(15815, record.ttl)
    }

    @Test fun testParsePacket() {
        val buffer = hexToByteArray("e4bf8180000100010000000003777777076578616d706c6503636f6d0000010001c00c0001000100004ec400045db8d
        val reader = ByteArrayReader(buffer)
        val packet = parsePacket(reader)
        assertEquals(1, packet.header.numAnswers)
        assertEquals(1, packet.header.numQuestions)
        assertEquals(0, packet.header.numAuthorities)
        assertEquals(0, packet.header.numAdditionals)
        assertEquals(33152, packet.header.flags)
        assertEquals("www.example.com", decodeDnsName(ByteArrayReader(packet.questions[0].name)))
        assertEquals(1, packet.questions.size)
        assertEquals(1, packet.questions[0].type_)
        assertEquals(1, packet.questions[0].class_)
        assertEquals(1, packet.answers.size)
        assertEquals("www.example.com", decodeDnsName(ByteArrayReader(packet.answers[0].name)))
        assertEquals(1, packet.answers[0].type_)
        assertEquals(1, packet.answers[0].class_)
        assertEquals(20164, packet.answers[0].ttl)
        println(packet)
    }


    // older tests for older functions
    @Test fun testParseHeader_old() {
        val buffer = hexToByteArray("2e7981800001000100000000")
        val header = parseHeader(buffer)
        assertEquals(1, header.numAnswers)
        assertEquals(1, header.numQuestions)
        assertEquals(33152, header.flags)
    }
    @Test fun testDecodeDomainName_old() {
        val buffer = hexToByteArray("03777777076578616d706c6503636f6d00")
        val expected = "www.example.com"
        val (actual, _) = decodeDnsName(buffer, 0)
        assertEquals(expected, actual)
    }
    @Test fun testParseQuestion_old() {
        val buffer = hexToByteArray("03777777076578616d706c6503636f6d0000010001")
        val question = parseQuestion(buffer)
        assertEquals("www.example.com", decodeDnsName(ByteArrayReader(question.name)))
        assertEquals(1, question.type_)
        assertEquals(1, question.class_)
    }


}
